INFO  20:18:40,523 - Compiling source file: C:\Users\vasil\Desktop\micro-java-compiler\test\program2.mj
INFO  20:18:40,663 - #2 program
INFO  20:18:40,663 - #50 p
INFO  20:18:40,663 - #4 class
INFO  20:18:40,679 - #50 Base
INFO  20:18:40,679 - #48 {
INFO  20:18:40,679 - #48 {
INFO  20:18:40,679 - #15 void
INFO  20:18:40,679 - #50 m1
INFO  20:18:40,679 - #44 (
INFO  20:18:40,679 - #45 )
INFO  20:18:40,679 - #48 {
INFO  20:18:40,679 - #49 }
INFO  20:18:40,679 - #49 }
INFO  20:18:40,679 - #49 }
INFO  20:18:40,679 - #4 class
INFO  20:18:40,679 - #50 Derived
INFO  20:18:40,679 - #16 extends
INFO  20:18:40,679 - #50 Base
INFO  20:18:40,679 - #48 {
INFO  20:18:40,679 - #48 {
INFO  20:18:40,679 - #15 void
INFO  20:18:40,695 - #50 m1
INFO  20:18:40,695 - #44 (
INFO  20:18:40,695 - #45 )
INFO  20:18:40,695 - #48 {
INFO  20:18:40,695 - #49 }
INFO  20:18:40,695 - #49 }
INFO  20:18:40,695 - #49 }
INFO  20:18:40,695 - #48 {
INFO  20:18:40,695 - #15 void
INFO  20:18:40,695 - #50 f
INFO  20:18:40,695 - #44 (
INFO  20:18:40,695 - #45 )
INFO  20:18:40,695 - #48 {
INFO  20:18:40,695 - #49 }
INFO  20:18:40,695 - #15 void
INFO  20:18:40,695 - #50 main
INFO  20:18:40,695 - #44 (
INFO  20:18:40,695 - #45 )
INFO  20:18:40,695 - #48 {
INFO  20:18:40,695 - #49 }
INFO  20:18:40,695 - #15 void
INFO  20:18:40,695 - #50 f2
INFO  20:18:40,695 - #44 (
INFO  20:18:40,695 - #50 int
INFO  20:18:40,695 - #50 x
INFO  20:18:40,695 - #41 ,
INFO  20:18:40,695 - #50 Base
INFO  20:18:40,695 - #50 b
INFO  20:18:40,695 - #45 )
INFO  20:18:40,695 - #48 {
INFO  20:18:40,695 - #49 }
INFO  20:18:40,695 - #15 void
INFO  20:18:40,695 - #50 formParamCallTest
INFO  20:18:40,695 - #44 (
INFO  20:18:40,695 - #45 )
INFO  20:18:40,695 - #50 Base
INFO  20:18:40,695 - #50 b
INFO  20:18:40,695 - #39 ;
INFO  20:18:40,695 - #50 Derived
INFO  20:18:40,695 - #50 d
INFO  20:18:40,695 - #39 ;
INFO  20:18:40,695 - #48 {
INFO  20:18:40,710 - #50 b
INFO  20:18:40,710 - #38 =
INFO  20:18:40,710 - #50 d
INFO  20:18:40,710 - #39 ;
INFO  20:18:40,710 - #50 b
INFO  20:18:40,710 - #38 =
INFO  20:18:40,710 - #50 b
INFO  20:18:40,710 - #39 ;
INFO  20:18:40,710 - #50 f2
INFO  20:18:40,710 - #44 (
INFO  20:18:40,710 - #51 5
INFO  20:18:40,710 - #41 ,
INFO  20:18:40,710 - #50 d
INFO  20:18:40,710 - #45 )
INFO  20:18:40,710 - #39 ;
INFO  20:18:40,710 - #50 f
INFO  20:18:40,710 - #44 (
INFO  20:18:40,710 - #45 )
INFO  20:18:40,710 - #39 ;
INFO  20:18:40,710 - #50 b
INFO  20:18:40,710 - #43 .
INFO  20:18:40,710 - #50 m1
INFO  20:18:40,710 - #44 (
INFO  20:18:40,710 - #45 )
INFO  20:18:40,710 - #39 ;
INFO  20:18:40,710 - #50 f
INFO  20:18:40,710 - #44 (
INFO  20:18:40,710 - #51 5
INFO  20:18:40,710 - #45 )
INFO  20:18:40,710 - #39 ;
INFO  20:18:40,726 - #50 f2
INFO  20:18:40,726 - #44 (
INFO  20:18:40,726 - #45 )
INFO  20:18:40,726 - #39 ;
INFO  20:18:40,726 - #50 f2
INFO  20:18:40,726 - #44 (
INFO  20:18:40,726 - #53 x
INFO  20:18:40,726 - #41 ,
INFO  20:18:40,726 - #51 5
INFO  20:18:40,726 - #45 )
INFO  20:18:40,726 - #39 ;
INFO  20:18:40,726 - #50 f2
INFO  20:18:40,726 - #44 (
INFO  20:18:40,726 - #51 5
INFO  20:18:40,726 - #41 ,
INFO  20:18:40,726 - #50 b
INFO  20:18:40,726 - #45 )
INFO  20:18:40,726 - #39 ;
INFO  20:18:40,726 - #49 }
INFO  20:18:40,726 - #15 void
INFO  20:18:40,726 - #50 assignTest
INFO  20:18:40,726 - #44 (
INFO  20:18:40,726 - #45 )
INFO  20:18:40,726 - #50 Base
INFO  20:18:40,726 - #50 base
INFO  20:18:40,726 - #39 ;
INFO  20:18:40,726 - #50 Derived
INFO  20:18:40,726 - #50 derived
INFO  20:18:40,726 - #39 ;
INFO  20:18:40,726 - #48 {
INFO  20:18:40,726 - #50 base
INFO  20:18:40,726 - #38 =
INFO  20:18:40,726 - #50 derived
INFO  20:18:40,726 - #39 ;
INFO  20:18:40,726 - #50 derived
INFO  20:18:40,726 - #38 =
INFO  20:18:40,726 - #50 base
INFO  20:18:40,726 - #39 ;
INFO  20:18:40,726 - #49 }
INFO  20:18:40,726 - #15 void
INFO  20:18:40,726 - #50 breakContinueTEst
INFO  20:18:40,726 - #44 (
INFO  20:18:40,726 - #45 )
INFO  20:18:40,726 - #48 {
INFO  20:18:40,726 - #9 do
INFO  20:18:40,726 - #48 {
INFO  20:18:40,726 - #3 break
INFO  20:18:40,726 - #39 ;
INFO  20:18:40,726 - #17 continue
INFO  20:18:40,726 - #39 ;
INFO  20:18:40,726 - #49 }
INFO  20:18:40,726 - #10 while
INFO  20:18:40,726 - #44 (
INFO  20:18:40,726 - #52 true
INFO  20:18:40,726 - #45 )
INFO  20:18:40,726 - #39 ;
INFO  20:18:40,726 - #3 break
INFO  20:18:40,726 - #39 ;
INFO  20:18:40,726 - #17 continue
INFO  20:18:40,726 - #39 ;
INFO  20:18:40,726 - #49 }
INFO  20:18:40,726 - #15 void
INFO  20:18:40,726 - #50 printReadTest
INFO  20:18:40,726 - #44 (
INFO  20:18:40,726 - #45 )
INFO  20:18:40,726 - #50 Base
INFO  20:18:40,726 - #50 b
INFO  20:18:40,741 - #39 ;
INFO  20:18:40,741 - #50 int
INFO  20:18:40,741 - #50 i
INFO  20:18:40,741 - #39 ;
INFO  20:18:40,741 - #50 char
INFO  20:18:40,741 - #50 c
INFO  20:18:40,741 - #39 ;
INFO  20:18:40,741 - #50 bool
INFO  20:18:40,741 - #50 bo
INFO  20:18:40,741 - #39 ;
INFO  20:18:40,741 - #48 {
INFO  20:18:40,741 - #13 read
INFO  20:18:40,741 - #44 (
INFO  20:18:40,741 - #50 b
INFO  20:18:40,741 - #45 )
INFO  20:18:40,741 - #39 ;
INFO  20:18:40,741 - #13 read
INFO  20:18:40,741 - #44 (
INFO  20:18:40,741 - #50 i
INFO  20:18:40,741 - #45 )
INFO  20:18:40,741 - #39 ;
INFO  20:18:40,741 - #13 read
INFO  20:18:40,741 - #44 (
INFO  20:18:40,741 - #50 c
INFO  20:18:40,741 - #45 )
INFO  20:18:40,741 - #39 ;
INFO  20:18:40,741 - #13 read
INFO  20:18:40,741 - #44 (
INFO  20:18:40,741 - #50 bo
INFO  20:18:40,741 - #45 )
INFO  20:18:40,741 - #39 ;
INFO  20:18:40,741 - #12 print
INFO  20:18:40,741 - #44 (
INFO  20:18:40,741 - #50 b
INFO  20:18:40,741 - #45 )
INFO  20:18:40,741 - #39 ;
INFO  20:18:40,741 - #12 print
INFO  20:18:40,741 - #44 (
INFO  20:18:40,741 - #50 i
INFO  20:18:40,741 - #45 )
INFO  20:18:40,741 - #39 ;
INFO  20:18:40,741 - #12 print
INFO  20:18:40,741 - #44 (
INFO  20:18:40,741 - #50 c
INFO  20:18:40,741 - #45 )
INFO  20:18:40,741 - #39 ;
INFO  20:18:40,741 - #12 print
INFO  20:18:40,741 - #44 (
INFO  20:18:40,741 - #50 bo
INFO  20:18:40,741 - #45 )
INFO  20:18:40,741 - #39 ;
INFO  20:18:40,741 - #12 print
INFO  20:18:40,741 - #44 (
INFO  20:18:40,741 - #51 5
INFO  20:18:40,741 - #45 )
INFO  20:18:40,741 - #39 ;
INFO  20:18:40,741 - #49 }
INFO  20:18:40,741 - #15 void
INFO  20:18:40,741 - #50 returnStatementTest1
INFO  20:18:40,741 - #44 (
INFO  20:18:40,741 - #45 )
INFO  20:18:40,741 - #48 {
INFO  20:18:40,741 - #14 return
INFO  20:18:40,741 - #51 5
INFO  20:18:40,741 - #39 ;
INFO  20:18:40,741 - #14 return
INFO  20:18:40,741 - #39 ;
INFO  20:18:40,741 - #49 }
INFO  20:18:40,741 - #50 int
INFO  20:18:40,741 - #50 returnStatementTest2
INFO  20:18:40,741 - #44 (
INFO  20:18:40,741 - #45 )
INFO  20:18:40,741 - #48 {
INFO  20:18:40,741 - #14 return
INFO  20:18:40,741 - #39 ;
INFO  20:18:40,741 - #14 return
INFO  20:18:40,741 - #51 5
INFO  20:18:40,741 - #39 ;
INFO  20:18:40,741 - #49 }
INFO  20:18:40,741 - #50 Base
INFO  20:18:40,741 - #50 returnStatementTest3
INFO  20:18:40,741 - #44 (
INFO  20:18:40,741 - #45 )
INFO  20:18:40,741 - #50 Derived
INFO  20:18:40,741 - #50 d
INFO  20:18:40,741 - #39 ;
INFO  20:18:40,741 - #48 {
INFO  20:18:40,741 - #14 return
INFO  20:18:40,741 - #39 ;
INFO  20:18:40,741 - #14 return
INFO  20:18:40,741 - #51 5
INFO  20:18:40,741 - #39 ;
INFO  20:18:40,741 - #14 return
INFO  20:18:40,741 - #50 d
INFO  20:18:40,741 - #39 ;
INFO  20:18:40,741 - #49 }
INFO  20:18:40,741 - #15 void
INFO  20:18:40,741 - #50 conditionTest
INFO  20:18:40,741 - #44 (
INFO  20:18:40,741 - #45 )
INFO  20:18:40,741 - #50 Base
INFO  20:18:40,741 - #50 b
INFO  20:18:40,741 - #39 ;
INFO  20:18:40,741 - #50 Derived
INFO  20:18:40,741 - #50 d
INFO  20:18:40,741 - #39 ;
INFO  20:18:40,741 - #50 int
INFO  20:18:40,741 - #50 arr1
INFO  20:18:40,741 - #46 [
INFO  20:18:40,741 - #47 ]
INFO  20:18:40,741 - #41 ,
INFO  20:18:40,757 - #50 arr2
INFO  20:18:40,757 - #46 [
INFO  20:18:40,757 - #47 ]
INFO  20:18:40,757 - #39 ;
INFO  20:18:40,757 - #50 char
INFO  20:18:40,757 - #50 arr3
INFO  20:18:40,757 - #46 [
INFO  20:18:40,757 - #47 ]
INFO  20:18:40,757 - #39 ;
INFO  20:18:40,757 - #50 Base
INFO  20:18:40,757 - #50 barr1
INFO  20:18:40,757 - #46 [
INFO  20:18:40,757 - #47 ]
INFO  20:18:40,757 - #41 ,
INFO  20:18:40,757 - #50 barr2
INFO  20:18:40,757 - #46 [
INFO  20:18:40,757 - #47 ]
INFO  20:18:40,757 - #39 ;
INFO  20:18:40,757 - #50 Derived
INFO  20:18:40,757 - #50 darr1
INFO  20:18:40,757 - #46 [
INFO  20:18:40,757 - #47 ]
INFO  20:18:40,757 - #39 ;
INFO  20:18:40,757 - #48 {
INFO  20:18:40,757 - #8 if
INFO  20:18:40,757 - #44 (
INFO  20:18:40,757 - #50 barr1
INFO  20:18:40,757 - #30 ==
INFO  20:18:40,757 - #50 barr2
INFO  20:18:40,757 - #45 )
INFO  20:18:40,757 - #48 {
INFO  20:18:40,757 - #49 }
INFO  20:18:40,757 - #6 else
INFO  20:18:40,757 - #8 if
INFO  20:18:40,757 - #44 (
INFO  20:18:40,757 - #50 barr1
INFO  20:18:40,757 - #30 ==
INFO  20:18:40,757 - #50 darr1
INFO  20:18:40,757 - #45 )
INFO  20:18:40,757 - #48 {
INFO  20:18:40,757 - #49 }
INFO  20:18:40,757 - #8 if
INFO  20:18:40,757 - #44 (
INFO  20:18:40,757 - #50 darr1
INFO  20:18:40,757 - #30 ==
INFO  20:18:40,757 - #50 barr1
INFO  20:18:40,757 - #45 )
INFO  20:18:40,757 - #48 {
INFO  20:18:40,757 - #49 }
INFO  20:18:40,757 - #8 if
INFO  20:18:40,757 - #44 (
INFO  20:18:40,757 - #50 arr1
INFO  20:18:40,757 - #30 ==
INFO  20:18:40,757 - #50 arr2
INFO  20:18:40,757 - #45 )
INFO  20:18:40,757 - #48 {
INFO  20:18:40,757 - #49 }
INFO  20:18:40,757 - #6 else
INFO  20:18:40,757 - #8 if
INFO  20:18:40,757 - #44 (
INFO  20:18:40,757 - #50 arr1
INFO  20:18:40,757 - #30 ==
INFO  20:18:40,757 - #50 arr3
INFO  20:18:40,757 - #45 )
INFO  20:18:40,757 - #48 {
INFO  20:18:40,757 - #49 }
INFO  20:18:40,757 - #6 else
INFO  20:18:40,757 - #8 if
INFO  20:18:40,757 - #44 (
INFO  20:18:40,757 - #50 arr1
INFO  20:18:40,757 - #33 >
INFO  20:18:40,757 - #50 arr2
INFO  20:18:40,757 - #45 )
INFO  20:18:40,757 - #48 {
INFO  20:18:40,757 - #49 }
INFO  20:18:40,757 - #8 if
INFO  20:18:40,757 - #44 (
INFO  20:18:40,757 - #51 5
INFO  20:18:40,757 - #45 )
INFO  20:18:40,757 - #48 {
INFO  20:18:40,757 - #49 }
INFO  20:18:40,757 - #6 else
INFO  20:18:40,757 - #8 if
INFO  20:18:40,757 - #44 (
INFO  20:18:40,757 - #51 5
INFO  20:18:40,757 - #33 >
INFO  20:18:40,757 - #51 5
INFO  20:18:40,757 - #45 )
INFO  20:18:40,757 - #48 {
INFO  20:18:40,757 - #49 }
INFO  20:18:40,757 - #6 else
INFO  20:18:40,757 - #8 if
INFO  20:18:40,757 - #44 (
INFO  20:18:40,757 - #51 5
INFO  20:18:40,757 - #33 >
INFO  20:18:40,757 - #53 t
INFO  20:18:40,757 - #45 )
INFO  20:18:40,757 - #48 {
INFO  20:18:40,757 - #49 }
INFO  20:18:40,757 - #6 else
INFO  20:18:40,757 - #8 if
INFO  20:18:40,757 - #44 (
INFO  20:18:40,757 - #50 b
INFO  20:18:40,757 - #30 ==
INFO  20:18:40,757 - #50 d
INFO  20:18:40,757 - #45 )
INFO  20:18:40,757 - #48 {
INFO  20:18:40,757 - #49 }
INFO  20:18:40,757 - #6 else
INFO  20:18:40,757 - #8 if
INFO  20:18:40,757 - #44 (
INFO  20:18:40,757 - #50 b
INFO  20:18:40,757 - #33 >
INFO  20:18:40,757 - #50 d
INFO  20:18:40,757 - #45 )
INFO  20:18:40,757 - #48 {
INFO  20:18:40,757 - #49 }
INFO  20:18:40,757 - #6 else
INFO  20:18:40,757 - #8 if
INFO  20:18:40,757 - #44 (
INFO  20:18:40,757 - #50 b
INFO  20:18:40,757 - #30 ==
INFO  20:18:40,757 - #50 b
INFO  20:18:40,757 - #45 )
INFO  20:18:40,757 - #48 {
INFO  20:18:40,757 - #49 }
INFO  20:18:40,757 - #49 }
INFO  20:18:40,757 - #49 }
INFO  20:18:40,898 -  Formal parameter declared (x). line 28
INFO  20:18:40,898 -  Formal parameter declared (b). line 28
INFO  20:18:40,898 - Local variable declared (b). line 32
INFO  20:18:40,898 - Local variable declared (d). line 32
INFO  20:18:40,898 - Global function call - f2() line 35
INFO  20:18:40,898 - Global function call - f() line 36
INFO  20:18:40,898 - Member reference: b DOT m1 line 37
ERROR 20:18:40,898 - Invalid method call - Method f() called with invalid number of arguments. line 38
ERROR 20:18:40,898 - Invalid method call - Method f2() called with invalid number of arguments. line 39
ERROR 20:18:40,898 - Invalid method call - Method f2() called with invalid arguments. line 40
INFO  20:18:40,898 - Global function call - f2() line 41
INFO  20:18:40,898 - Local variable declared (base). line 44
INFO  20:18:40,898 - Local variable declared (derived). line 44
ERROR 20:18:40,898 - Incompatible assignment operation types. line 46
ERROR 20:18:40,898 - Break statement must be inside do-while loop.
ERROR 20:18:40,898 - Continue statement must be inside do-while loop.
INFO  20:18:40,898 - Local variable declared (b). line 57
INFO  20:18:40,898 - Local variable declared (i). line 57
INFO  20:18:40,898 - Local variable declared (c). line 57
INFO  20:18:40,898 - Local variable declared (bo). line 57
ERROR 20:18:40,898 - Invalid read statement - Identifier (b) must be either int, char or bool type. line 58
ERROR 20:18:40,898 - Invalid print statement - expression inside the statement must be either int, char or bool type. line 62
ERROR 20:18:40,898 - Invalid return statement - returned type does not match method/function type. line 70
ERROR 20:18:40,898 - Invalid return statement - return statement must return a value. line 8
INFO  20:18:40,898 - Local variable declared (d). line 80
ERROR 20:18:40,898 - Invalid return statement - return statement must return a value. line 8
ERROR 20:18:40,898 - Invalid return statement - returned type does not match method/function type. line 82
INFO  20:18:40,898 - Local variable declared (b). line 86
INFO  20:18:40,898 - Local variable declared (d). line 86
INFO  20:18:40,898 - Local variable declared (arr1). line 86
INFO  20:18:40,898 - Local variable declared (arr2). line 86
INFO  20:18:40,898 - Local variable declared (arr3). line 86
INFO  20:18:40,898 - Local variable declared (barr1). line 86
INFO  20:18:40,898 - Local variable declared (barr2). line 86
INFO  20:18:40,898 - Local variable declared (darr1). line 86
ERROR 20:18:40,898 - Invalid condition statement - expressions must be compatible. line 99
ERROR 20:18:40,898 - Invalid condition statement - class objects and arrays can be compared only using '==' or '!=' operators. line 102
ERROR 20:18:40,898 - Invalid condition statement - expression must be bool type. line 105
ERROR 20:18:40,898 - Invalid condition statement - expressions must be compatible. line 113
ERROR 20:18:40,898 - Invalid condition statement - class objects and arrays can be compared only using '==' or '!=' operators. line 120
