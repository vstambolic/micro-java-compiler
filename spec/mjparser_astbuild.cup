package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;

// import java.io.*;
import rs.ac.bg.etf.pp1.ast.*;


parser code {:

	boolean errorDetected = false;

	Logger log = Logger.getLogger(getClass());


    // slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke

    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }

    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
    }

    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    public void report_error(String message, Object info) {
    	errorDetected = true;
    	StringBuilder msg = new StringBuilder(message);
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.error(msg.toString());
    }

    public void report_info(String message, Object info) {
    	StringBuilder msg = new StringBuilder(message);
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.info(msg.toString());
    }

:}

scan with {:
	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null)
		log.info(s.toString() + " " + s.value.toString());
	return s;
:}


terminal PROG,BREAK,CLASS,ENUM,ELSE,CONST,IF,DO,WHILE,NEW,PRINT,READ,RETURN,VOID,EXTENDS,CONTINUE,THIS,SUPER,RECORD,INSTANCEOF,INC,DEC,ADD,SUB,MUL,DIV,MOD,EXP,EQ,NEQ,GTE,GT,LTE,LT,AND,OR,ASSIGN,SEMICOLON,COLON,COMMA,VARARGS,DOT,LPAREN,RPAREN,LBRACKET,RBRACKET,LBRACE,RBRACE;
terminal String IDENT;
terminal Integer NUMBER;
terminal Boolean BOOL;
terminal Character CHAR;

nonterminal Program Program;
nonterminal rs.etf.pp1.symboltable.concepts.Obj ProgramDecl;
nonterminal DeclList DeclList;
nonterminal Decl Decl;
nonterminal MethodDeclList MethodDeclList;
nonterminal ConstDecl ConstDecl;
nonterminal VarDecl VarDecl;
nonterminal ClassDecl ClassDecl;
nonterminal rs.etf.pp1.symboltable.concepts.Obj ClassDeclStart;
nonterminal ClassVarDeclList ClassVarDeclList;
nonterminal RecordDecl RecordDecl;
nonterminal RecordDeclStart RecordDeclStart;
nonterminal rs.etf.pp1.symboltable.concepts.Struct Type;
nonterminal ConstAssignment ConstAssignment;
nonterminal ConstAssignmentList ConstAssignmentList;
nonterminal Literal Literal;
nonterminal Var Var;
nonterminal VarList VarList;
nonterminal VarDeclList VarDeclList;
nonterminal Brackets Brackets;
nonterminal Extends Extends;
nonterminal ConstructorDeclAndMethodDeclListWrapper ConstructorDeclAndMethodDeclListWrapper;
nonterminal ConstructorDeclAndMethodDeclList ConstructorDeclAndMethodDeclList;
nonterminal ConstructorDecl ConstructorDecl;
nonterminal StatementList StatementList;
nonterminal rs.etf.pp1.symboltable.concepts.Obj MethodDecl;
nonterminal rs.etf.pp1.symboltable.concepts.Obj MethodDeclStart;
nonterminal TypeOrVoid TypeOrVoid;
nonterminal FormPars FormPars;
nonterminal FormParList FormParList;
nonterminal FormPar FormPar;
nonterminal Statement Statement;
nonterminal MatchedStatement MatchedStatement;
nonterminal UnmatchedStatement UnmatchedStatement;
nonterminal Condition Condition;
nonterminal Designator Designator;
nonterminal DesignatorOperation DesignatorOperation;
nonterminal CondTerm CondTerm;
nonterminal CondFact CondFact;
nonterminal Expr Expr;
nonterminal OrCondTermList OrCondTermList;
nonterminal AndCondFactList AndCondFactList;
nonterminal RelopExpr RelopExpr;
nonterminal Term Term;
nonterminal AddopTermList AddopTermList;
nonterminal Addop Addop;
nonterminal Relop Relop;
nonterminal Mulop Mulop;
nonterminal Assignop Assignop;
nonterminal Expop Expop;
nonterminal Factor Factor;
nonterminal MulopFactorList MulopFactorList;
nonterminal BaseExp BaseExp;
nonterminal ExpopBaseExpList ExpopBaseExpList;
nonterminal ActParsOrNothing ActParsOrNothing;
nonterminal BracketsWithExprOrNothing BracketsWithExprOrNothing;
nonterminal FuncCallOrNothing FuncCallOrNothing;
nonterminal ExprList ExprList;
nonterminal VarArgs VarArgs;
nonterminal ExprOrNothing ExprOrNothing;
nonterminal NumConstList NumConstList;
nonterminal FormParsOrError FormParsOrError;
nonterminal ConditionOrError ConditionOrError;

Program ::=
    (Program)
    ProgramDecl:P1 DeclList:D2 LBRACE MethodDeclList:M3 RBRACE {: RESULT=new Program(P1, D2, M3); RESULT.setLine(P1left); :};

ProgramDecl ::=
    (ProgramDecl)
    PROG IDENT:ident {: RESULT=new ProgramDecl(ident); RESULT.setLine(identleft); :};

DeclList ::=
    (DeclListIndeed)
    DeclList:D1 Decl:D2 {: RESULT=new DeclListIndeed(D1, D2); RESULT.setLine(D1left); :}
    |
    (NoDeclList) {: RESULT=new NoDeclList(); :}
    /* Æ? */;

Decl ::=
    (ConstDeclaration)
    ConstDecl:C1 {: RESULT=new ConstDeclaration(C1); RESULT.setLine(C1left); :}
    |
    (VarDeclaration)
    VarDecl:V1 {: RESULT=new VarDeclaration(V1); RESULT.setLine(V1left); :}
    |
    (ClassDeclaration)
    ClassDecl:C1 {: RESULT=new ClassDeclaration(C1); RESULT.setLine(C1left); :}
    |
    (RecordDeclarataion)
    RecordDecl:R1 {: RESULT=new RecordDeclarataion(R1); RESULT.setLine(R1left); :};

RecordDecl ::=
    (RecordDecl)
    RECORD RecordDeclStart:R1 LBRACE VarDeclList:V2 RBRACE {: RESULT=new RecordDecl(R1, V2); RESULT.setLine(R1left); :};

RecordDeclStart ::=
    (RecordDeclStart)
    IDENT:ident {: RESULT=new RecordDeclStart(ident); RESULT.setLine(identleft); :};

ConstDecl ::=
    (ConstDecl)
    CONST Type:type ConstAssignment:C1 ConstAssignmentList:C2 SEMICOLON {: RESULT=new ConstDecl(type, C1, C2); RESULT.setLine(typeleft); :}
//  |
//    (ConstDeclError)
//    CONST error SEMICOLON:l
//    {: parser.report_error("SYNTAX ERROR: one or more invalid const declarations on line: " + lleft , null); :}
    ;

ConstAssignment ::=
    (ConstAssignment)
    IDENT:ident ASSIGN Literal:L1 {: RESULT=new ConstAssignment(ident, L1); RESULT.setLine(identleft); :};

ConstAssignmentList ::=
    (ConstAssignmentListIndeed)
    ConstAssignmentList:C1 COMMA ConstAssignment:C2 {: RESULT=new ConstAssignmentListIndeed(C1, C2); RESULT.setLine(C1left); :}
    |
    (NoConstAssignmentList) {: RESULT=new NoConstAssignmentList(); :}
    /* Æ? */;

NumConstList ::=
    (NumConstListIndeed)
    NumConstList:N1 COMMA NUMBER:N2 {: RESULT=new NumConstListIndeed(N1, N2); RESULT.setLine(N1left); :}
    | {: RESULT=new NumConstListDerived1(); :}
    /* Æ? */;

Literal ::=
    (NumConst)
    NUMBER:numVal {: RESULT=new NumConst(numVal); RESULT.setLine(numValleft); :}
    |
    (CharConst)
    CHAR:charVal {: RESULT=new CharConst(charVal); RESULT.setLine(charValleft); :}
    |
    (BoolConst)
    BOOL:boolVal {: RESULT=new BoolConst(boolVal); RESULT.setLine(boolValleft); :};

Type ::=
    (Type)
    IDENT:ident {: RESULT=new Type(ident); RESULT.setLine(identleft); :}
    ;

TypeOrVoid ::=
    (TypeOrVoid_Type)
    Type:type {: RESULT=new TypeOrVoid_Type(type); RESULT.setLine(typeleft); :}
    |
    (TypeOrVoid_Void)
    VOID {: RESULT=new TypeOrVoid_Void(); :};

VarDecl ::=
    (VarDeclValid)
    Type:T1 Var:V2 VarList:V3 SEMICOLON {: RESULT=new VarDeclValid(T1, V2, V3); RESULT.setLine(T1left); :}
    |
    (VarDeclErrorCommaRecovery)
    error COMMA:l
    {: parser.report_error("SYNTAX ERROR: one or more invalid var declarations on line: " + lleft , null); :} {: RESULT=new VarDeclErrorCommaRecovery(); :}
    |
    (VarDeclErrorSemicolonRecovery)
    error SEMICOLON:l
    {: parser.report_error("SYNTAX ERROR: one or more invalid var declarations on line: " + lleft , null); :} {: RESULT=new VarDeclErrorSemicolonRecovery(); :};


Var ::=
    (Var)
    IDENT:ident Brackets:B1 {: RESULT=new Var(ident, B1); RESULT.setLine(identleft); :}
    ;

Brackets ::=
    (BracketsIndeed)
    LBRACKET RBRACKET {: RESULT=new BracketsIndeed(); :}
    |
    (NoBrackets) {: RESULT=new NoBrackets(); :}
    /* Æ? */;

VarList ::=
    (VarListIndeed)
    VarList:V1 COMMA Var:V2 {: RESULT=new VarListIndeed(V1, V2); RESULT.setLine(V1left); :}
    |
    (NoVarList) {: RESULT=new NoVarList(); :}
    /* Æ? */;

VarDeclList ::=
    (VarDeclListIndeed)
    VarDeclList:V1 VarDecl:V2 {: RESULT=new VarDeclListIndeed(V1, V2); RESULT.setLine(V1left); :}
    |
    (NoVarDeclList) {: RESULT=new NoVarDeclList(); :}
    /* Æ? */;

ClassDecl ::=
    (ClassDeclValid)
    ClassDeclStart:C1 Extends:E2 LBRACE ClassVarDeclList:C3 ConstructorDeclAndMethodDeclListWrapper:C4 RBRACE {: RESULT=new ClassDeclValid(C1, E2, C3, C4); RESULT.setLine(C1left); :}
    |
    (ClassDeclError)
    ClassDeclStart:C1 EXTENDS error:l {: parser.report_error("SYNTAX ERROR: invalid EXTENDS syntax on line: " + lleft , null); :}
    LBRACE VarDeclList:V2 ConstructorDeclAndMethodDeclListWrapper:C3 RBRACE {: RESULT=new ClassDeclError(C1, V2, C3); RESULT.setLine(C1left); :}
    ;

ClassDeclStart ::=
    (ClassDeclStart)
    CLASS IDENT:ident {: RESULT=new ClassDeclStart(ident); RESULT.setLine(identleft); :}
    ;

ClassVarDeclList ::=
    (ClassVarDeclList)
    VarDeclList:V1 {: RESULT=new ClassVarDeclList(V1); RESULT.setLine(V1left); :}
    ;

Extends ::=
    (ExtendsIndeed)
    EXTENDS Type:ident {: RESULT=new ExtendsIndeed(ident); RESULT.setLine(identleft); :}
    |
    (NoExtends) {: RESULT=new NoExtends(); :}
    /* Æ? */;

ConstructorDeclAndMethodDeclListWrapper ::=
    (ConstructorDeclAndMethodDeclListWrapperIndeed)
    LBRACE ConstructorDeclAndMethodDeclList:C1 RBRACE {: RESULT=new ConstructorDeclAndMethodDeclListWrapperIndeed(C1); RESULT.setLine(C1left); :}
    |
    (NoConstructorDeclAndMethodDeclListWrapper) {: RESULT=new NoConstructorDeclAndMethodDeclListWrapper(); :}
    /* Æ? */;

ConstructorDeclAndMethodDeclList ::=
    (ConstructorAndMethodDeclListIndeed)
    ConstructorDecl:C1 MethodDeclList:M2 {: RESULT=new ConstructorAndMethodDeclListIndeed(C1, M2); RESULT.setLine(C1left); :}
    |
    (MethodDeclListWithoutConstructorDecl)
    MethodDeclList:M1 {: RESULT=new MethodDeclListWithoutConstructorDecl(M1); RESULT.setLine(M1left); :};

ConstructorDecl ::=
    (ConstructorDecl)
    IDENT:ident LPAREN RPAREN VarDeclList:V1 LBRACE StatementList:S2 RBRACE {: RESULT=new ConstructorDecl(ident, V1, S2); RESULT.setLine(identleft); :};

MethodDeclList ::=
    (MethodDeclListIndeed)
    MethodDecl:M1 MethodDeclList:M2 {: RESULT=new MethodDeclListIndeed(M1, M2); RESULT.setLine(M1left); :}
    |
    (NoMethodDeclList) {: RESULT=new NoMethodDeclList(); :}
    /* Æ? */;

MethodDecl ::=
    (MethodDecl)
    TypeOrVoid:T1 MethodDeclStart:M2 FormParsOrError:F3 VarDeclList:V4 LBRACE StatementList:S5 RBRACE {: RESULT=new MethodDecl(T1, M2, F3, V4, S5); RESULT.setLine(T1left); :};

MethodDeclStart ::=
    (MethodDeclStart)
    IDENT:ident {: RESULT=new MethodDeclStart(ident); RESULT.setLine(identleft); :};

FormParsOrError ::=
    (FormParsFormPars)
    LPAREN FormPars:F1 RPAREN {: RESULT=new FormParsFormPars(F1); RESULT.setLine(F1left); :}
    |
    (FormParsErrorRPAREN)
    LPAREN error:l {: parser.report_error("SYNTAX ERROR: one or more invalid formal parameter declarations on line: " + lleft , null); :} RPAREN {: RESULT=new FormParsErrorRPAREN(); :}
    ;

FormPars ::=
    (MultipleFormPars)
    FormParList:F1 COMMA FormPar:F2 {: RESULT=new MultipleFormPars(F1, F2); RESULT.setLine(F1left); :}
    |
    (MultipleFormParsAndVarArgs)
    FormParList:F1 COMMA VarArgs:V2 {: RESULT=new MultipleFormParsAndVarArgs(F1, V2); RESULT.setLine(F1left); :}
    |
    (FormParsErrorCOMMA)
    error:l {: parser.report_error("SYNTAX ERROR: one or more invalid formal parameter declarations on line: " + lleft , null); :} COMMA {: RESULT=new FormParsErrorCOMMA(); :}
    |
    (SingleFormPar)
    FormPar:F1 {: RESULT=new SingleFormPar(F1); RESULT.setLine(F1left); :}
    |
    (SingleVarArg)
    VarArgs:V1 {: RESULT=new SingleVarArg(V1); RESULT.setLine(V1left); :}
    |
    (NoFormPars) {: RESULT=new NoFormPars(); :}
    /* Æ? */;

FormParList ::=
    (FormParListMultiple)
    FormParList:F1 COMMA FormPar:F2 {: RESULT=new FormParListMultiple(F1, F2); RESULT.setLine(F1left); :}
    |
    (FirstFormPar)
    FormPar:F1 {: RESULT=new FirstFormPar(F1); RESULT.setLine(F1left); :};

FormPar ::=
    (FormPar)
    Type:type IDENT:ident Brackets:B1 {: RESULT=new FormPar(type, ident, B1); RESULT.setLine(typeleft); :};

VarArgs ::=
    (VarArgs)
    Type:type VARARGS IDENT:ident {: RESULT=new VarArgs(type, ident); RESULT.setLine(typeleft); :};

StatementList ::=
    (StatementListIndeed)
    StatementList:S1 Statement:S2 {: RESULT=new StatementListIndeed(S1, S2); RESULT.setLine(S1left); :}
    |
    (NoStatementList) {: RESULT=new NoStatementList(); :}
    /* Æ? */;

Statement ::=
    (StatementMatchedStatement)
    MatchedStatement:M1 {: RESULT=new StatementMatchedStatement(M1); RESULT.setLine(M1left); :}
    |
    (StatementUnmatchedStatement)
    UnmatchedStatement:U1 {: RESULT=new StatementUnmatchedStatement(U1); RESULT.setLine(U1left); :};

MatchedStatement ::=
    (MatchedIfStatement)
    IF ConditionOrError:C1 MatchedStatement:M2 ELSE MatchedStatement:M3 {: RESULT=new MatchedIfStatement(C1, M2, M3); RESULT.setLine(C1left); :}
    |
    (BodyStatement)
    LBRACE StatementList:S1 RBRACE {: RESULT=new BodyStatement(S1); RESULT.setLine(S1left); :}
    |
    (DesignatorStatement)
    Designator:D1 DesignatorOperation:D2 SEMICOLON {: RESULT=new DesignatorStatement(D1, D2); RESULT.setLine(D1left); :}
    |
    (DesignatorAssignStatementError)
    Designator:D1 Assignop:A2 error:l {: parser.report_info("SYNTAX ERROR: one or more invalid assign operations on line: " + lleft, null); :} SEMICOLON {: RESULT=new DesignatorAssignStatementError(D1, A2); RESULT.setLine(D1left); :}
    |
    (DoWhileStatement)
    DO StatementList:S1 WHILE LPAREN Condition:C2 RPAREN SEMICOLON {: RESULT=new DoWhileStatement(S1, C2); RESULT.setLine(S1left); :}
    |
    (BreakStatement)
    BREAK SEMICOLON {: RESULT=new BreakStatement(); :}
    |
    (ContinueStatement)
    CONTINUE SEMICOLON {: RESULT=new ContinueStatement(); :}
    |
    (ReturnStatement)
    RETURN ExprOrNothing:E1 SEMICOLON {: RESULT=new ReturnStatement(E1); RESULT.setLine(E1left); :}
    |
    (ReadStatement)
    READ LPAREN Designator:D1 RPAREN SEMICOLON {: RESULT=new ReadStatement(D1); RESULT.setLine(D1left); :}
    |
    (PrintStatement)
    PRINT LPAREN Expr:E1 NumConstList:N2 RPAREN SEMICOLON {: RESULT=new PrintStatement(E1, N2); RESULT.setLine(E1left); :};

UnmatchedStatement ::=
    (UnmatchedIfStatement)
    IF ConditionOrError:C1 Statement:S2 {: RESULT=new UnmatchedIfStatement(C1, S2); RESULT.setLine(C1left); :}
    |
    (UnmatchedIfElseStatement)
    IF ConditionOrError:C1 MatchedStatement:M2 ELSE UnmatchedStatement:U3 {: RESULT=new UnmatchedIfElseStatement(C1, M2, U3); RESULT.setLine(C1left); :};

ConditionOrError ::=
    (ConditionValid)
    LPAREN Condition:C1 RPAREN {: RESULT=new ConditionValid(C1); RESULT.setLine(C1left); :}
    |
    (ConditionError)
    LPAREN error:l {: parser.report_info("SYNTAX ERROR: one or more invalid assign operations on line: " + lleft, null); :} RPAREN {: RESULT=new ConditionError(); :};

DesignatorOperation ::=
    (DesignatorAssignOperation)
    Assignop:A1 Expr:E2 {: RESULT=new DesignatorAssignOperation(A1, E2); RESULT.setLine(A1left); :}
    |
    (DesignatorFuncCallOperation)
    LPAREN ActParsOrNothing:A1 RPAREN {: RESULT=new DesignatorFuncCallOperation(A1); RESULT.setLine(A1left); :}
    |
    (DesignatorIncOperation)
    INC {: RESULT=new DesignatorIncOperation(); :}
    |
    (DesignatorDecOperation)
    DEC {: RESULT=new DesignatorDecOperation(); :};

ActParsOrNothing ::=
    (ActPars)
    Expr:E1 ExprList:E2 {: RESULT=new ActPars(E1, E2); RESULT.setLine(E1left); :}
    |
    (NoActPars) {: RESULT=new NoActPars(); :}
    /* Æ? */;

ExprList ::=
    (ExprListIndeed)
    ExprList:E1 COMMA Expr:E2 {: RESULT=new ExprListIndeed(E1, E2); RESULT.setLine(E1left); :}
    |
    (NoExprList) {: RESULT=new NoExprList(); :}
    /* Æ? */;

ExprOrNothing ::=
    (ExprIndeed)
    Expr:E1 {: RESULT=new ExprIndeed(E1); RESULT.setLine(E1left); :}
    | {: RESULT=new ExprOrNothingDerived1(); :}
    /* Æ? */;

Designator ::=
    (DesignatorMemberReference)
    Designator:D1 DOT IDENT:I2 {: RESULT=new DesignatorMemberReference(D1, I2); RESULT.setLine(D1left); :}
    |
    (DesignatorArrayReference)
    Designator:D1 LBRACKET Expr:E2 RBRACKET {: RESULT=new DesignatorArrayReference(D1, E2); RESULT.setLine(D1left); :}
    |
    (DesignatorIdent)
    IDENT:ident {: RESULT=new DesignatorIdent(ident); RESULT.setLine(identleft); :};

Condition ::=
    (Condition)
    CondTerm:C1 OrCondTermList:O2 {: RESULT=new Condition(C1, O2); RESULT.setLine(C1left); :};

CondTerm ::=
    (CondTerm)
    CondFact:C1 AndCondFactList:A2 {: RESULT=new CondTerm(C1, A2); RESULT.setLine(C1left); :};

OrCondTermList ::=
    (OrCondTermListIndeed)
    OrCondTermList:O1 OR CondTerm:C2 {: RESULT=new OrCondTermListIndeed(O1, C2); RESULT.setLine(O1left); :}
    |
    (NoOrCondTermList) {: RESULT=new NoOrCondTermList(); :}
    /* Æ? */;

AndCondFactList ::=
    (AndCondFactListIndeed)
    AndCondFactList:A1 AND CondFact:C2 {: RESULT=new AndCondFactListIndeed(A1, C2); RESULT.setLine(A1left); :}
    |
    (NoAndCondTermList) {: RESULT=new NoAndCondTermList(); :}
    /* Æ? */;

CondFact ::=
    (ExprCondFact)
    Expr:E1 RelopExpr:R2 {: RESULT=new ExprCondFact(E1, R2); RESULT.setLine(E1left); :}
    |
    (InstanceOfCondFact)
    Designator:D1 INSTANCEOF Type:type {: RESULT=new InstanceOfCondFact(D1, type); RESULT.setLine(D1left); :};

RelopExpr ::=
    (RelopExprIndeed)
    Relop:R1 Expr:E2 {: RESULT=new RelopExprIndeed(R1, E2); RESULT.setLine(R1left); :}
    |
    (NoRelopExpr) {: RESULT=new NoRelopExpr(); :}
    /* Æ? */;

Expr ::=
    (NegativeExpr)
    SUB Term:T1 AddopTermList:A2 {: RESULT=new NegativeExpr(T1, A2); RESULT.setLine(T1left); :}
    |
    (PositiveExpr)
    Term:T1 AddopTermList:A2 {: RESULT=new PositiveExpr(T1, A2); RESULT.setLine(T1left); :};

Term ::=
    (Term)
    Factor:F1 MulopFactorList:M2 {: RESULT=new Term(F1, M2); RESULT.setLine(F1left); :};

MulopFactorList ::=
    (MulopFactorListIndeed)
    MulopFactorList:M1 Mulop:M2 Factor:F3 {: RESULT=new MulopFactorListIndeed(M1, M2, F3); RESULT.setLine(M1left); :}
    |
    (NoMulopFactorList) {: RESULT=new NoMulopFactorList(); :}
    /* Æ? */;

Factor ::=
    (Factor)
    BaseExp:B1 ExpopBaseExpList:E2 {: RESULT=new Factor(B1, E2); RESULT.setLine(B1left); :};

ExpopBaseExpList ::=
    (ExpopBaseExpListIndeed)
    ExpopBaseExpList:E1 Expop:E2 BaseExp:B3 {: RESULT=new ExpopBaseExpListIndeed(E1, E2, B3); RESULT.setLine(E1left); :}
    |
    (NoExpopBaseExpList) {: RESULT=new NoExpopBaseExpList(); :}
    /* Æ? */;

BaseExp ::=
    (BaseExpDesignator)
    Designator:D1 FuncCallOrNothing:F2 {: RESULT=new BaseExpDesignator(D1, F2); RESULT.setLine(D1left); :}
    |
    (BaseExpNumber)
    NUMBER:N1 {: RESULT=new BaseExpNumber(N1); RESULT.setLine(N1left); :}
    |
    (BaseExpChar)
    CHAR:C1 {: RESULT=new BaseExpChar(C1); RESULT.setLine(C1left); :}
    |
    (BaseExpBool)
    BOOL:B1 {: RESULT=new BaseExpBool(B1); RESULT.setLine(B1left); :}
    |
    (BaseExpNewInstance)
    NEW Type:T1 BracketsWithExprOrNothing:B2 {: RESULT=new BaseExpNewInstance(T1, B2); RESULT.setLine(T1left); :}
    |
    (BaseExpExpr)
    LPAREN Expr:E1 RPAREN {: RESULT=new BaseExpExpr(E1); RESULT.setLine(E1left); :};

FuncCallOrNothing ::=
    (FuncCall)
    LPAREN ActParsOrNothing:A1 RPAREN {: RESULT=new FuncCall(A1); RESULT.setLine(A1left); :}
    |
    (NoFuncCall) {: RESULT=new NoFuncCall(); :}
    /* Æ? */;

BracketsWithExprOrNothing ::=
    (BracketsWithExpr)
    LBRACKET Expr:E1 RBRACKET {: RESULT=new BracketsWithExpr(E1); RESULT.setLine(E1left); :}
    |
    (NoBracketsWithExpr) {: RESULT=new NoBracketsWithExpr(); :}
    /* Æ? */;

AddopTermList ::=
    (AddopTermListIndeed)
    AddopTermList:A1 Addop:A2 Term:T3 {: RESULT=new AddopTermListIndeed(A1, A2, T3); RESULT.setLine(A1left); :}
    |
    (NoAddopTermList) {: RESULT=new NoAddopTermList(); :}
    /* Æ? */;

Addop ::=
    (Add)
    ADD {: RESULT=new Add(); :}
    |
    (Sub)
    SUB {: RESULT=new Sub(); :};

Assignop ::=
    (Assign)
    ASSIGN {: RESULT=new Assign(); :};

Relop ::=
    (Eq)
    EQ {: RESULT=new Eq(); :}
    |
    (Neq)
    NEQ {: RESULT=new Neq(); :}
    |
    (Gt)
    GT {: RESULT=new Gt(); :}
    |
    (Gte)
    GTE {: RESULT=new Gte(); :}
    |
    (Lt)
    LT {: RESULT=new Lt(); :}
    |
    (Lte)
    LTE {: RESULT=new Lte(); :};

Mulop ::=
    (Mul)
    MUL {: RESULT=new Mul(); :}
    |
    (Div)
    DIV {: RESULT=new Div(); :}
    |
    (Mod)
    MOD {: RESULT=new Mod(); :};

Expop ::=
    (Exp)
    EXP {: RESULT=new Exp(); :};
