program p



class Base {
    {
        void m1() {
        }
    }
}
class Derived extends Base {
   {
           void m1() {
           }
       }
}

{

    void f() {

    }

    void main() {

    }

    void f2(int x, Base b) {

    }

    void formParamCallTest() Base b; Derived d; {
        b = d;
        b = b;
        f2(5, d);
        f();
        b.m1();
        f(5);
        f2();
        f2('x',5);
        f2(5, b);
    }

    void assignTest() Base base; Derived derived; {
       base = derived;
       derived = base;
    }

    void breakContinueTEst() {
        do {
            break;
            continue;
        } while (true);
        break;
        continue;
    }
    void printReadTest() Base b; int i; char c; bool bo; {
        read(b); //error
        read(i);
        read(c);
        read(bo);
        print(b); //error
        print(i);
        print(c);
        print(bo);
        print(5);
    }

    void returnStatementTest1() {
        return 5;
        return;
    }


    int returnStatementTest2() {
        return;
        return 5;
    }

    Base returnStatementTest3() Derived d; {
        return;
        return 5;
        return d;
    }

    void conditionTest() Base b; Derived d; int arr1[], arr2[]; char arr3[]; Base barr1[], barr2[]; Derived darr1[]; {
        if (barr1 == barr2) {
        }
        else
        if (barr1 == darr1) {
        }
        if (darr1 == barr1) {}



        if (arr1 == arr2) {
        }
        else
            if (arr1 == arr3) {
            }
            else
            if (arr1 > arr2) {
            }

        if (5) {
            // error
        }
        else
            if (5>5) {

            }
            else
                if (5> 't') {
                    // error
                }
                else
                    if (b == d) {
                    }
                    else
                    if (b > d) {
                    }
                    else
                    if (b==b) {
                    }
    }

    void exprTest() int x; char c;{

        x = -x;
        c = -c; // error

        x = x + x;
        x = c + c + c; // error


        x = x * c;
        x = c * c;
    }

    void newInstanceTest() Base b, barr[]; {
        b = new Derived;
        barr = new Derived[5];

        barr = new Derived['x'];
    }
}


